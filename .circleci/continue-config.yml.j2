{# https://circleci.com/docs/2.0/building-docker-images/#docker-version #}
---
version: 2.1

orbs:
  python: circleci/python@2.1.1

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.11

parameters:
{%- for directory in directories %}
  {{ directory }}:
    type: boolean
    default: false
    description: "Set True if you want to run build for image {{ directory }}."
{%- endfor %}
  overwrite_tags:
    type: boolean
    default: false
    description: "Set True if you want to overwrite existing docker image tag."

workflows:
  version: 2.1
{%- for directory in workflow_directories %}
  {{ directory }}-build:
    when:
      and:
        - << pipeline.parameters.{{ directory }} >>
    jobs:
      - build:
          name: build
          directory: {{ directory }}
      - test:
          directory: {{ directory }}
          test_script: bin/test.py
          test_requirements: requirements/requirements.txt
          requires:
            - build
      - scan-trivy:
          directory: {{ directory }}
          requires:
            - test
      - scan-twistlock:
          directory: {{ directory }}
          requires:
            - test
          context:
            - twistcli
      - release:
          directory: {{ directory }}
          tags: "latest"
          overwrite_tags: << pipeline.parameters.overwrite_tags >>
          context:
            - quay.io
            - docker.io
            - azurecr.io
          requires:
            - scan-trivy
            - scan-twistlock
          filters:
            branches:
              only:
                - main
      - validate-tags:
          directory: {{ directory }}
          tags: "latest"
          overwrite_tags: << pipeline.parameters.overwrite_tags >>
          context:
            - quay.io
            - docker.io
            - azurecr.io
          requires:
            - scan-trivy
            - scan-twistlock
          filters:
            branches:
              ignore: main
{%- endfor %}

jobs:
  build:
    executor: docker-executor
    description: Build an image
    parameters:
      directory:
        description: "The directory of the image to build"
        type: string
    steps:
      - docker-build:
          image_name: ap-<< parameters.directory >>
          dockerfile: Dockerfile
          path: << parameters.directory >>
  test:
    executor: docker-executor
    description: "Test the docker image"
    parameters:
      directory:
        description: "The directory of the image to build"
        type: string
      test_script:
        description: "The pytest test script"
        type: string
      test_requirements:
        description: "The python requirement file."
        type: string
    steps:
      - docker-test:
          image_name: ap-<< parameters.directory >>
          path: << parameters.directory >>
          test_script: << parameters.test_script >>
          test_requirements: << parameters.test_requirements >>
  scan-trivy:
    docker:
      - image: docker:{{ docker_version }}-git
    description: "Trivy: Vulnerability scan a Docker image"
    parameters:
      directory:
        description: "The directory name of the image to be scanned"
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
          image: aquasec/trivy:latest
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: |
            set -x
            docker load -i /tmp/workspace/ap-<< parameters.directory >>.tar
            docker images | grep ap-<< parameters.directory >>
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl rpm bash
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
            date +%F > date
      - restore_cache:
          keys:
            {% raw %}- trivy-cache-{{ checksum "date" }}{% endraw %}
      - run:
          name: Scan the local image with trivy
          command: bin/trivy-scan.sh "<< parameters.directory >>"
      - save_cache:
          {% raw %}key: trivy-cache-{{ checksum "date" }}{% endraw %}
          paths:
            - /tmp/workspace/trivy-cache
  scan-twistlock:
    docker:
      - image: cimg/python:3.10
    description: "Twistcli: Vulnerability scan a Docker image"
    parameters:
      directory:
        description: "The directory name of the image to be scanned"
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: |
            set -x
            docker load -i /tmp/workspace/ap-<< parameters.directory >>.tar
            docker images | grep ap-<< parameters.directory >>
      - run:
          name: Install twistcli
          command: |
            sudo curl -k -u "$USER:$PASSWORD" --output /usr/local/bin/twistcli "${CONSOLE_URL}/api/v1/util/twistcli"
            sudo chmod +x /usr/local/bin/twistcli
      - run:
          name: scan image
          command: |
            twistcli images scan --output-file << parameters.directory >>/scan-results.json --address "$CONSOLE_URL" --user="$USER" --password="$PASSWORD" --details "ap-<< parameters.directory >>:${CIRCLE_SHA1}"
            export PROJECT_DIRECTORY=<< parameters.directory >>
            chmod +x bin/twistcli_validator.py
            python bin/twistcli_validator.py
  release:
    executor: docker-executor
    parameters:
      directory:
        description: "The directory name of the image to be published"
        type: string
      overwrite_tags:
        type: boolean
        default: false
      tags:
        description: "Comma separated list of tags."
        type: string
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - python_install_packages-operations
      - run:
          name: Load archived Docker image
          command: |
            set -x
            docker load -i /tmp/workspace/ap-<< parameters.directory >>.tar
            docker images | grep ap-<< parameters.directory >>
      - docker-operations:
          operations: push
          project_path: << parameters.directory >>
          registry: "quay.io"
          registry_username: "${QUAY_USERNAME}"
          registry_password: "${QUAY_PASSWORD}"
          repository: "astronomer"
          image_name: ap-<< parameters.directory >>
          tags: << parameters.tags >>
          overwrite_tags: << parameters.overwrite_tags >>
      - docker-operations:
          operations: push
          project_path: << parameters.directory >>
          registry: "docker.io"
          registry_username: "${DOCKER_USERNAME}"
          registry_password: "${DOCKER_PASSWORD}"
          repository: "astronomerinc"
          image_name: ap-<< parameters.directory >>
          tags: << parameters.tags >>
          overwrite_tags: << parameters.overwrite_tags >>
      - docker-operations:
          operations: push
          project_path: << parameters.directory >>
          registry: "astrocrpublic.azurecr.io"
          registry_username: "${ACR_PUBLIC_USERNAME}"
          registry_password: "${ACR_PUBLIC_PASSWORD}"
          repository: "astronomer"
          image_name: ap-<< parameters.directory >>
          tags: << parameters.tags >>
          overwrite_tags: << parameters.overwrite_tags >>
      - docker-operations:
          operations: push
          project_path: << parameters.directory >>
          registry: "astrocr.azurecr.io"
          registry_username: "${ACR_USERNAME}"
          registry_password: "${ACR_PASSWORD}"
          repository: "astronomer"
          image_name: ap-<< parameters.directory >>
          tags: << parameters.tags >>
          overwrite_tags: << parameters.overwrite_tags >>

  validate-tags:
    executor: docker-executor
    parameters:
      directory:
        description: "The directory name of the image to be validated"
        type: string
      tags:
        description: "Comma separated list of tags."
        type: string
      overwrite_tags:
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - python_install_packages-operations
      - run:
          name: Load archived Docker image
          command: |
            set -x
            docker load -i /tmp/workspace/ap-<< parameters.directory >>.tar
            docker images | grep ap-<< parameters.directory >>
      - docker-operations:
          operations: validate_tags
          project_path: << parameters.directory >>
          registry: "quay.io"
          registry_username: "${QUAY_USERNAME}"
          registry_password: "${QUAY_PASSWORD}"
          repository: "astronomer"
          image_name: ap-<< parameters.directory >>
          tags: << parameters.tags >>
          overwrite_tags: << parameters.overwrite_tags >>
      - docker-operations:
          operations: validate_tags
          project_path: << parameters.directory >>
          registry: "docker.io"
          registry_username: "${DOCKER_USERNAME}"
          registry_password: "${DOCKER_PASSWORD}"
          repository: "astronomerinc"
          image_name: ap-<< parameters.directory >>
          tags: << parameters.tags >>
          overwrite_tags: << parameters.overwrite_tags >>
      - docker-operations:
          operations: validate_tags
          project_path: << parameters.directory >>
          registry: "astrocrpublic.azurecr.io"
          registry_username: "${ACR_PUBLIC_USERNAME}"
          registry_password: "${ACR_PUBLIC_PASSWORD}"
          repository: "astronomer"
          image_name: ap-<< parameters.directory >>
          tags: << parameters.tags >>
          overwrite_tags: << parameters.overwrite_tags >>
      - docker-operations:
          operations: validate_tags
          project_path: << parameters.directory >>
          registry: "astrocr.azurecr.io"
          registry_username: "${ACR_USERNAME}"
          registry_password: "${ACR_PASSWORD}"
          repository: "astronomer"
          image_name: ap-<< parameters.directory >>
          tags: << parameters.tags >>
          overwrite_tags: << parameters.overwrite_tags >>

commands:
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      build_requirements:
        type: string
        default: requirements/requirements.txt
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: << parameters.build_requirements >>
          pkg-manager: pip
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
      - run:
          name: Build the Docker image
          command: bin/docker-operations.py build --project_path=<< parameters.path>> --image=<< parameters.image_name >>
      - run:
          name: Running Docker image inspect
          command: docker inspect "<< parameters.image_name >>:${CIRCLE_SHA1}"
      - persist_to_workspace:
          root: .
          paths:
            - "./*.tar"

  docker-test:
    description: "Test a Docker image"
    parameters:
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      test_script:
        type: string
        default: bin/test.py
      test_requirements:
        type: string
        default: requirements/requirements.txt
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: << parameters.test_requirements >>
          pkg-manager: pip
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: |
            set -x
            docker load -i /tmp/workspace/<< parameters.image_name >>.tar
            docker images | grep << parameters.image_name >>
      - run:
          name: Run Docker image test
          environment:
            ASTRO_IMAGE_NAME: << parameters.image_name >>
            ASTRO_IMAGE_TEST_CONFIG_PATH: << parameters.path >>/test.yaml
          command: |
            mkdir test-results
            pytest -v --junitxml=test-results/junit.xml << parameters.test_script>>
      - store_test_results:
          path: test-results

  docker-operations:
    description: "Performing Docker Operation << parameters.operations >> for << parameters.registry >>"
    parameters:
      operations:
        type: string
      project_path:
        type: string
        default: "."
      registry:
        type: string
        default: $CIRCLE_BRANCH
      registry_username:
        type: string
      registry_password:
        type: string
      repository:
        type: string
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      tags:
        type: string
      overwrite_tags:
        type: boolean
        default: false
    steps:
      - run:
          name: Validating docker image(s)'s tags to << parameters.registry >>
          command: bin/docker-operations.py << parameters.operations >> --project_path=<< parameters.project_path >> --registry="<< parameters.registry >>" --username="<< parameters.registry_username >>" --password="<< parameters.registry_password >>" --repository="<< parameters.repository >>" --image="<< parameters.image_name >>" --tags=<< parameters.tags >> --overwrite_tags=<< parameters.overwrite_tags >>

  python_install_packages-operations:
    description: "Installing Python dependencies."
    parameters:
      script_requirements:
        type: string
        default: requirements/requirements.txt
    steps:
      - python/install-packages:
          pip-dependency-file: << parameters.script_requirements >>
          pkg-manager: pip
