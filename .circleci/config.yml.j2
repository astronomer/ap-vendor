{# https://circleci.com/docs/2.0/building-docker-images/#docker-version #}
{%- set docker_version = '20.10.17' -%}
---
version: 2.1
orbs:
  python: circleci/python@2.0.3
workflows:
  version: 2.1
  vendor-build:
    jobs:
      - run_pre_commit
{% for directory in directories %}
      - approve-{{ directory }}:
          type: approval
      - build:
          name: build-{{ directory }}
          directory: {{ directory }}
          requires:
            - approve-{{ directory }}
            - run_pre_commit
      - test:
          name: test-{{ directory }}
          directory: {{ directory }}
          test_script: bin/test.py
          test_requirements: requirements/test-requirements.txt
          requires:
            - build-{{ directory }}
      - scan-trivy:
          name: scan-trivy-{{ directory }}
          directory: {{ directory }}
          requires:
            - test-{{ directory }}
      - release:
          name: release-{{ directory }}
          directory: {{ directory }}
          context:
            - quay.io
            - docker.io
          requires:
            - scan-trivy-{{ directory }}
          filters:
            branches:
              only: main
{% endfor %}
jobs:
  run_pre_commit:
    docker:
      - image: quay.io/astronomer/ci-pre-commit:2022-01
    steps:
      - checkout
      - run:
          name: Create pre-commit-cache-key.txt
          command: |
            cp .pre-commit-config.yaml /tmp/pre-commit-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/pre-commit-cache-key.txt
      - restore_cache:
          keys:
            - pre-commit-cache-{{ '{{' }} checksum "/tmp/pre-commit-cache-key.txt" }}
      - run:
          name: Install pre-commit hooks
          command: pre-commit install-hooks
      - save_cache:
          key: pre-commit-cache-{{ '{{' }} checksum "/tmp/pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit
      - run:
          name: Run pre-commit
          command: pre-commit run --all-files --show-diff-on-failure
  build:
    executor: docker-executor
    description: Build an image
    parameters:
      directory:
        description: "The directory of the image to build"
        type: string
    steps:
      - docker-build:
          image_name: ap-<< parameters.directory >>
          dockerfile: Dockerfile
          path: << parameters.directory >>
  test:
    executor: docker-executor
    description: "Test the docker image"
    parameters:
      directory:
        description: "The directory of the image to build"
        type: string
      test_script:
        description: "The pytest test script"
        type: string
      test_requirements:
        description: "The python requirement file."
        type: string
    steps:
      - docker-test:
          image_name: ap-<< parameters.directory >>
          path: << parameters.directory >>
          test_script: << parameters.test_script >>
          test_requirements: << parameters.test_requirements >>
  scan-trivy:
    docker:
      - image: docker:{{ docker_version }}-git
    description: "Trivy: Vulnerability scan a Docker image"
    parameters:
      directory:
        description: "The directory name of the image to be scanned"
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
          image: aquasec/trivy:latest
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: |
            set -x
            docker load -i /tmp/workspace/ap-<< parameters.directory >>.tar
            docker images | grep ap-<< parameters.directory >>
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl rpm bash
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
            date +%F > date
      - restore_cache:
          keys:
            {% raw %}- trivy-cache-{{ checksum "date" }}{% endraw %}
      - run:
          name: Scan the local image with trivy
          command: bin/trivy-scan.sh "<< parameters.directory >>"
      - save_cache:
          {% raw %}key: trivy-cache-{{ checksum "date" }}{% endraw %}
          paths:
            - /tmp/workspace/trivy-cache
  release:
    executor: docker-executor
    parameters:
      directory:
        description: "The directory name of the image to be scanned"
        type: string
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
      - checkout
      - push-docker-image:
          registry: "quay.io"
          registry_username: "${QUAY_USERNAME}"
          registry_password: "${QUAY_PASSWORD}"
          repository: "astronomer"
          image_name: ap-<< parameters.directory >>
      - push-docker-image:
          registry: "docker.io"
          registry_username: "${DOCKER_USERNAME}"
          registry_password: "${DOCKER_PASSWORD}"
          repository: "astronomerinc"
          image_name: ap-<< parameters.directory >>
executors:
  docker-executor:
    docker:
      - image: cimg/python:3.9
commands:
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      build_requirements:
        type: string
        default: requirements/build-requirements.txt
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: << parameters.build_requirements >>
          pkg-manager: pip
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
      - run:
          name: Build the Docker image
          command: bin/docker-operations.py build --project_path=<< parameters.path>> --image=<< parameters.image_name >>
      - run:
          name: Running Docker image inspect
          command: docker inspect "<< parameters.image_name >>:${CIRCLE_SHA1}"
      - persist_to_workspace:
          root: .
          paths:
            - "./*.tar"
  docker-test:
    description: "Test a Docker image"
    parameters:
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      test_script:
        type: string
        default: bin/test.py
      test_requirements:
        type: string
        default: requirements/test-requirements.txt
    steps:
      - checkout
      - python/install-packages:
          pip-dependency-file: << parameters.test_requirements >>
          pkg-manager: pip
      - setup_remote_docker:
          docker_layer_caching: true
          version: {{ docker_version }}
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: |
            set -x
            docker load -i /tmp/workspace/<< parameters.image_name >>.tar
            docker images | grep << parameters.image_name >>
      - run:
          name: Run Docker image test
          environment:
            ASTRO_IMAGE_NAME: << parameters.image_name >>
            ASTRO_IMAGE_TEST_CONFIG_PATH: << parameters.path >>/test.yaml
          command: |
            mkdir test-results
            pytest -v --junitxml=test-results/junit.xml << parameters.test_script>>
      - store_test_results:
          path: test-results
  push-docker-image:
    description: "Push a Docker image to << parameters.registry >>"
    parameters:
      registry:
        type: string
        default: $CIRCLE_BRANCH
      registry_username:
        type: string
      registry_password:
        type: string
      repository:
        type: string
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      release_requirements:
        type: string
        default: requirements/build-requirements.txt
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - python/install-packages:
          pip-dependency-file: << parameters.release_requirements >>
          pkg-manager: pip
      - run:
          name: Load archived Docker image
          command: |
            set -x
            docker load -i /tmp/workspace/<< parameters.image_name >>.tar
            docker images | grep << parameters.image_name >>
      - run:
          name: Push Docker image(s) to << parameters.registry >>
          command: bin/docker-operations.py push --registry="<< parameters.registry >>" --username="<< parameters.registry_username >>" --password="<< parameters.registry_password >>" --repository="<< parameters.repository >>" --image="<< parameters.image_name >>"
