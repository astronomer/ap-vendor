# Warning: automatically generated file
# Please edit config.yml.j2, and use the script generate_circleci_config.py
version: 2.1
workflows:
  version: 2.1
  vendor-build:
    jobs:

      - build:
          name: build-nginx-es
          directory: nginx-es
      - scan:
          name: scan-nginx-es
          directory: nginx-es
          requires:
            - build-nginx-es
      - scan-trivy:
          name: scan-trivy-nginx-es
          directory: nginx-es
          requires:
            - build-nginx-es
      - release:
          name: release-nginx-es
          directory: nginx-es
          requires:
            - scan-nginx-es
          filters:
            branches:
              only: master

      - build:
          name: build-fluentd
          directory: fluentd
      - scan:
          name: scan-fluentd
          directory: fluentd
          requires:
            - build-fluentd
      - scan-trivy:
          name: scan-trivy-fluentd
          directory: fluentd
          requires:
            - build-fluentd
      - release:
          name: release-fluentd
          directory: fluentd
          requires:
            - scan-fluentd
          filters:
            branches:
              only: master

      - build:
          name: build-kibana
          directory: kibana
      - scan:
          name: scan-kibana
          directory: kibana
          requires:
            - build-kibana
      - scan-trivy:
          name: scan-trivy-kibana
          directory: kibana
          requires:
            - build-kibana
      - release:
          name: release-kibana
          directory: kibana
          requires:
            - scan-kibana
          filters:
            branches:
              only: master

      - build:
          name: build-redis
          directory: redis
      - scan:
          name: scan-redis
          directory: redis
          requires:
            - build-redis
      - scan-trivy:
          name: scan-trivy-redis
          directory: redis
          requires:
            - build-redis
      - release:
          name: release-redis
          directory: redis
          requires:
            - scan-redis
          filters:
            branches:
              only: master

      - build:
          name: build-alertmanager
          directory: alertmanager
      - scan:
          name: scan-alertmanager
          directory: alertmanager
          requires:
            - build-alertmanager
      - scan-trivy:
          name: scan-trivy-alertmanager
          directory: alertmanager
          requires:
            - build-alertmanager
      - release:
          name: release-alertmanager
          directory: alertmanager
          requires:
            - scan-alertmanager
          filters:
            branches:
              only: master

      - build:
          name: build-prisma
          directory: prisma
      - scan:
          name: scan-prisma
          directory: prisma
          requires:
            - build-prisma
      - scan-trivy:
          name: scan-trivy-prisma
          directory: prisma
          requires:
            - build-prisma
      - release:
          name: release-prisma
          directory: prisma
          requires:
            - scan-prisma
          filters:
            branches:
              only: master

      - build:
          name: build-curator
          directory: curator
      - scan:
          name: scan-curator
          directory: curator
          requires:
            - build-curator
      - scan-trivy:
          name: scan-trivy-curator
          directory: curator
          requires:
            - build-curator
      - release:
          name: release-curator
          directory: curator
          requires:
            - scan-curator
          filters:
            branches:
              only: master

      - build:
          name: build-grafana
          directory: grafana
      - scan:
          name: scan-grafana
          directory: grafana
          requires:
            - build-grafana
      - scan-trivy:
          name: scan-trivy-grafana
          directory: grafana
          requires:
            - build-grafana
      - release:
          name: release-grafana
          directory: grafana
          requires:
            - scan-grafana
          filters:
            branches:
              only: master

      - build:
          name: build-elasticsearch-exporter
          directory: elasticsearch-exporter
      - scan:
          name: scan-elasticsearch-exporter
          directory: elasticsearch-exporter
          requires:
            - build-elasticsearch-exporter
      - scan-trivy:
          name: scan-trivy-elasticsearch-exporter
          directory: elasticsearch-exporter
          requires:
            - build-elasticsearch-exporter
      - release:
          name: release-elasticsearch-exporter
          directory: elasticsearch-exporter
          requires:
            - scan-elasticsearch-exporter
          filters:
            branches:
              only: master

      - build:
          name: build-keda
          directory: keda
      - scan:
          name: scan-keda
          directory: keda
          requires:
            - build-keda
      - scan-trivy:
          name: scan-trivy-keda
          directory: keda
          requires:
            - build-keda
      - release:
          name: release-keda
          directory: keda
          requires:
            - scan-keda
          filters:
            branches:
              only: master

      - build:
          name: build-pgbouncer-exporter
          directory: pgbouncer-exporter
      - scan:
          name: scan-pgbouncer-exporter
          directory: pgbouncer-exporter
          requires:
            - build-pgbouncer-exporter
      - scan-trivy:
          name: scan-trivy-pgbouncer-exporter
          directory: pgbouncer-exporter
          requires:
            - build-pgbouncer-exporter
      - release:
          name: release-pgbouncer-exporter
          directory: pgbouncer-exporter
          requires:
            - scan-pgbouncer-exporter
          filters:
            branches:
              only: master

      - build:
          name: build-nginx
          directory: nginx
      - scan:
          name: scan-nginx
          directory: nginx
          requires:
            - build-nginx
      - scan-trivy:
          name: scan-trivy-nginx
          directory: nginx
          requires:
            - build-nginx
      - release:
          name: release-nginx
          directory: nginx
          requires:
            - scan-nginx
          filters:
            branches:
              only: master

      - build:
          name: build-registry
          directory: registry
      - scan:
          name: scan-registry
          directory: registry
          requires:
            - build-registry
      - scan-trivy:
          name: scan-trivy-registry
          directory: registry
          requires:
            - build-registry
      - release:
          name: release-registry
          directory: registry
          requires:
            - scan-registry
          filters:
            branches:
              only: master

      - build:
          name: build-blackbox-exporter
          directory: blackbox-exporter
      - scan:
          name: scan-blackbox-exporter
          directory: blackbox-exporter
          requires:
            - build-blackbox-exporter
      - scan-trivy:
          name: scan-trivy-blackbox-exporter
          directory: blackbox-exporter
          requires:
            - build-blackbox-exporter
      - release:
          name: release-blackbox-exporter
          directory: blackbox-exporter
          requires:
            - scan-blackbox-exporter
          filters:
            branches:
              only: master

      - build:
          name: build-statsd-exporter
          directory: statsd-exporter
      - scan:
          name: scan-statsd-exporter
          directory: statsd-exporter
          requires:
            - build-statsd-exporter
      - scan-trivy:
          name: scan-trivy-statsd-exporter
          directory: statsd-exporter
          requires:
            - build-statsd-exporter
      - release:
          name: release-statsd-exporter
          directory: statsd-exporter
          requires:
            - scan-statsd-exporter
          filters:
            branches:
              only: master

      - build:
          name: build-prometheus
          directory: prometheus
      - scan:
          name: scan-prometheus
          directory: prometheus
          requires:
            - build-prometheus
      - scan-trivy:
          name: scan-trivy-prometheus
          directory: prometheus
          requires:
            - build-prometheus
      - release:
          name: release-prometheus
          directory: prometheus
          requires:
            - scan-prometheus
          filters:
            branches:
              only: master

      - build:
          name: build-kubed
          directory: kubed
      - scan:
          name: scan-kubed
          directory: kubed
          requires:
            - build-kubed
      - scan-trivy:
          name: scan-trivy-kubed
          directory: kubed
          requires:
            - build-kubed
      - release:
          name: release-kubed
          directory: kubed
          requires:
            - scan-kubed
          filters:
            branches:
              only: master

      - build:
          name: build-keda-metrics-adapter
          directory: keda-metrics-adapter
      - scan:
          name: scan-keda-metrics-adapter
          directory: keda-metrics-adapter
          requires:
            - build-keda-metrics-adapter
      - scan-trivy:
          name: scan-trivy-keda-metrics-adapter
          directory: keda-metrics-adapter
          requires:
            - build-keda-metrics-adapter
      - release:
          name: release-keda-metrics-adapter
          directory: keda-metrics-adapter
          requires:
            - scan-keda-metrics-adapter
          filters:
            branches:
              only: master

      - build:
          name: build-pgbouncer
          directory: pgbouncer
      - scan:
          name: scan-pgbouncer
          directory: pgbouncer
          requires:
            - build-pgbouncer
      - scan-trivy:
          name: scan-trivy-pgbouncer
          directory: pgbouncer
          requires:
            - build-pgbouncer
      - release:
          name: release-pgbouncer
          directory: pgbouncer
          requires:
            - scan-pgbouncer
          filters:
            branches:
              only: master

      - build:
          name: build-kube-state
          directory: kube-state
      - scan:
          name: scan-kube-state
          directory: kube-state
          requires:
            - build-kube-state
      - scan-trivy:
          name: scan-trivy-kube-state
          directory: kube-state
          requires:
            - build-kube-state
      - release:
          name: release-kube-state
          directory: kube-state
          requires:
            - scan-kube-state
          filters:
            branches:
              only: master

      - build:
          name: build-elasticsearch
          directory: elasticsearch
      - scan:
          name: scan-elasticsearch
          directory: elasticsearch
          requires:
            - build-elasticsearch
      - scan-trivy:
          name: scan-trivy-elasticsearch
          directory: elasticsearch
          requires:
            - build-elasticsearch
      - release:
          name: release-elasticsearch
          directory: elasticsearch
          requires:
            - scan-elasticsearch
          filters:
            branches:
              only: master

      - build:
          name: build-node-exporter
          directory: node-exporter
      - scan:
          name: scan-node-exporter
          directory: node-exporter
          requires:
            - build-node-exporter
      - scan-trivy:
          name: scan-trivy-node-exporter
          directory: node-exporter
          requires:
            - build-node-exporter
      - release:
          name: release-node-exporter
          directory: node-exporter
          requires:
            - scan-node-exporter
          filters:
            branches:
              only: master

jobs:
  build:
    executor: docker-executor
    description: Build an image
    parameters:
      directory:
        description: "The directory of the image to build"
        type: string
    steps:
      - docker-build:
          image_name: ap-<< parameters.directory >>
          dockerfile: Dockerfile
          path: << parameters.directory >>
  scan:
    executor: clair-scanner/default
    parameters:
      directory:
        description: "The directory name of the image to be scanned"
        type: string
    steps:
      - clair-scan:
          directory: << parameters.directory >>
  scan-trivy:
    docker:
      - image: docker:18.09-git
    description: "Trivy: Vulnerability scanner a Docker image"
    parameters:
      directory:
        description: "The directory name of the image to be scanned"
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/ap-<< parameters.directory >>.tar
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl rpm
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      - restore_cache:
          keys:
            - trivy-cache
      - run:
          name: Scan the local image with trivy
          command: |
            set +x
            set +o pipefail
            set +e pipefail
            output=$(trivy --ignorefile ./ap-<< parameters.directory >>/trivyignore --ignorefile ./<< parameters.directory >>/trivyignore --cache-dir /tmp/workspace/trivy-cache --ignore-unfixed -s HIGH,CRITICAL --exit-code 1 --no-progress "ap-<< parameters.directory >>")
            exit_code=$?
            # trivy doesn't support busybox scanning right now: https://github.com/aquasecurity/trivy/issues/397
            # TODO: @andriisoldatenko patch trivy to add busybox
            MATCHES=$(echo "$output" | grep -i 'unknown os' | wc -l)
            if [[ ${MATCHES} -eq 1 ]]; then
               echo "Skipping trivy scan because of unsupported OS"
               exit 0
            fi
            echo "${output}"
            exit ${exit_code}
      - save_cache:
          key: trivy-cache
          paths:
            - /tmp/workspace/trivy-cache
  release:
    executor: docker-executor
    parameters:
      directory:
        description: "The directory name of the image to be scanned"
        type: string
    steps:
      - checkout
      - get-tag:
          directory: << parameters.directory >>
      - push:
          comma_separated_tags: "latest,$TAG"
          image_name: ap-<< parameters.directory >>
orbs:
  clair-scanner: ovotech/clair-scanner@1.6.0
executors:
  docker-executor:
    environment:
      GIT_ORG: astronomer
      DOCKER_REPO: astronomerinc
    docker:
      - image: circleci/python:3
commands:
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build the Docker image
          command: |
            set -xe
            image_name="<< parameters.image_name >>"
            docker build -t $image_name --file << parameters.path>>/<< parameters.dockerfile >> --build-arg BUILD_NUMBER=${CIRCLE_BUILD_NUM} << parameters.path >>
            docker save -o << parameters.image_name >>.tar $image_name
      - persist_to_workspace:
          root: .
          paths:
            - './*.tar'
  push:
    description: "Push a Docker image to DockerHub"
    parameters:
      comma_separated_tags:
        type: string
        default: latest
      docker_repository:
        type: string
        default: $DOCKER_REPO
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/<< parameters.image_name >>.tar
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
      - run:
          name: Push Docker image(s)
          command: |
            set -xe
            function docker_tag_exists() {
                curl --silent -f -lSL https://index.docker.io/v1/repositories/$1/tags/$2 > /dev/null
            }
            function tag_and_push() {
                docker tag << parameters.image_name >> << parameters.docker_repository >>/<< parameters.image_name >>:$1
                docker push << parameters.docker_repository >>/<< parameters.image_name >>:$1
            }
            for tag in $(echo "<< parameters.comma_separated_tags >>" | sed "s/,/ /g");
            do
              # If the tag looks starts with "v" then a digit, remove the "v"
              pattern="^(v[0-9].*)"
              if [[ $tag =~ $pattern ]]; then
                tag="${tag:1}"
              fi
              if docker_tag_exists << parameters.docker_repository >>/<< parameters.image_name >> ${tag}; then
                  if [[ $tag -eq "latest" ]]; then
                    tag_and_push $tag
                  else
                    echo "This docker tag already exists. Skipping the Docker push!"
                  fi
              else
                tag_and_push $tag
              fi
            done
  get-tag:
    description: "Set an environment variable to this release branch with an incremented patch version"
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Determine the tag
          command: |
            set -xe
            pip install --user packaging
            cat > /tmp/next_patch_version.py \<<- EOM
            import sys
            from packaging.version import parse as semver
            directory="<< parameters.directory >>"
            with open(f"{ directory }/version.txt", "r") as version_file:
              version = version_file.read().strip()
            if not semver(version).release:
              sys.stderr.write(f"Please provide a semantic version in { directory }/version.txt")
              exit(1)
            sys.stdout.write(version)
            EOM
            TAG=$(python /tmp/next_patch_version.py)
            # Make this environment variable available to following steps
            echo "export TAG=${TAG}" >> $BASH_ENV
  clair-scan:
    description: "Clair: Vulnerability scan a Docker image"
    parameters:
      directory:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/ap-<< parameters.directory >>.tar
      - modified-orb:
          whitelist: "<< parameters.directory >>/cve-whitelist.yaml"
          image: "ap-<< parameters.directory >>"
  # TODO: move to an Astronomer orbs repo, publish orb.
  # This is to work around an issue in the provided orb https://github.com/ovotech/circleci-orbs/issues/89.
  modified-orb:
    description: "Scan an image for vulnerabilities"
    parameters:
      image:
        type: "string"
        description: "Name of the image to scan"
        default: ""
      image_file:
        type: "string"
        description: "Path to a file of images to scan"
        default: ""
      whitelist:
        type: "string"
        description: "Path to a CVE whitelist"
        default: ""
      severity_threshold:
        type: "string"
        description: "The threshold (equal and above) at which discovered vulnerabilities are reported. May be 'Defcon1', 'Critical', 'High', 'Medium', 'Low', 'Negligible' or 'Unknown'"
        default: "High"
      fail_on_discovered_vulnerabilities:
        type: "boolean"
        description: "Fail command when vulnerabilities at severity equal to or above the threshold are discovered"
        default: true
      fail_on_unsupported_images:
        type: "boolean"
        description: "Fail command when image cannot be scanned for vulnerabilities"
        default: false
      disable_verbose_console_output:
        type: "boolean"
        description: "Disable verbose console output"
        default: false
      docker_tar_dir:
        type: "string"
        description: "Path of directory that Docker tarballs are stored"
        default: "/docker-tars"
    steps:
      - run:
          name: "Vulnerability scan"
          command: |
            #!/usr/bin/env bash

            set -xe

            DOCKER_TAR_DIR="<< parameters.docker_tar_dir >>"

            if [ -z "<< parameters.image_file >><< parameters.image >>" ] && [ -z "$(ls -A "$DOCKER_TAR_DIR" 2>/dev/null)" ]; then
                echo "image_file or image parameters or docker tarballs must be present"
                exit 255
            fi

            REPORT_DIR=/clair-reports
            mkdir $REPORT_DIR

            DB=$(docker run -p 5432:5432 -d arminc/clair-db:latest)
            CLAIR=$(docker run -p 6060:6060 --link "$DB":postgres -d arminc/clair-local-scan:latest)
            CLAIR_SCANNER=$(docker run -v /var/run/docker.sock:/var/run/docker.sock -d ovotech/clair-scanner@sha256:8a4f920b4e7e40dbcec4a6168263d45d3385f2970ee33e5135dd0e3b75d39c75 tail -f /dev/null)

            clair_ip=$(docker exec -it "$CLAIR" hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
            scanner_ip=$(docker exec -it "$CLAIR_SCANNER" hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')

            if [ -n "<< parameters.whitelist >>" ]; then
                cat "<< parameters.whitelist >>"
                docker cp "<< parameters.whitelist >>" "$CLAIR_SCANNER:/whitelist.yml"

                WHITELIST="-w /whitelist.yml"
            fi

            function scan() {
                local image=$1
                # replace forward-slashes and colons with underscores
                munged_image=$(echo "$image" | sed 's/\//_/g' | sed 's/:/_/g')
                sanitised_image_filename="${munged_image}.json"
                local ret=0
                local docker_cmd=(docker exec -it "$CLAIR_SCANNER" clair-scanner \
                    --ip "$scanner_ip" \
                    --clair=http://"$clair_ip":6060 \
                    -t "<< parameters.severity_threshold >>" \
                    --report "/$sanitised_image_filename" \
                    --log "/log.json" \
                    --whitelist /whitelist.yml \
                    --reportAll=true \
                    "$image")

                # if verbose output is disabled, analyse status code for more fine-grained output
                if [ "<< parameters.disable_verbose_console_output >>" == "true" ];then
                    "${docker_cmd[@]}" > /dev/null 2>&1 || ret=$?
                else
                    "${docker_cmd[@]}" 2>&1 || ret=$?
                fi
                if [ $ret -eq 0 ]; then
                    echo "No unapproved vulnerabilities"
                elif [ $ret -eq 1 ]; then
                    echo "Unapproved vulnerabilities found"
                    if [ "<< parameters.fail_on_discovered_vulnerabilities >>" == "true" ];then
                        EXIT_STATUS=1
                    fi
                elif [ $ret -eq 5 ]; then
                    echo "Image was not scanned, because no features were detected. This basically means Clair found nothing to scan."
                    if [ "<< parameters.fail_on_unsupported_images >>" == "true" ];then
                        EXIT_STATUS=1
                    fi
                else
                    echo "Unknown clair-scanner return code $ret."
                    EXIT_STATUS=1
                fi

                docker cp "$CLAIR_SCANNER:/$sanitised_image_filename" "$REPORT_DIR/$sanitised_image_filename" || true
            }

            EXIT_STATUS=0

            for entry in "$DOCKER_TAR_DIR"/*.tar; do
                [ -e "$entry" ] || continue
                images=$(docker load -i "$entry" | sed -e 's/Loaded image: //g')
                for image in $images; do
                    scan "$image"
                done
            done

            if [ -n "<< parameters.image_file >>" ]; then
                images=$(cat "<< parameters.image_file >>")
                for image in $images; do
                    scan "$image"
                done
            fi
            if [ -n "<< parameters.image >>" ]; then
                image="<< parameters.image >>"
                scan "$image"
            fi

            exit $EXIT_STATUS
      - store_artifacts:
          path: /clair-reports